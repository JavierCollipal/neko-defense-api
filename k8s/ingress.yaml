# 🐾⚡ NEKO DEFENSE API - Nginx Ingress Controller ⚡🐾
# WORLDWIDE HTTPS LOAD BALANCING, NYAA~! 🌍✨

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: neko-defense-api-ingress
  namespace: production
  annotations:
    # 🌐 NGINX Configuration
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"

    # ⚡ PERFORMANCE
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"

    # 🛡️ SECURITY
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://your-domain.com"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"

    # 🔐 SSL/TLS Configuration
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256"

    # 🚀 RATE LIMITING (Additional layer)
    nginx.ingress.kubernetes.io/limit-rps: "100"
    nginx.ingress.kubernetes.io/limit-connections: "50"

    # 📊 LOAD BALANCING
    nginx.ingress.kubernetes.io/load-balance: "round_robin"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$request_uri"

    # 🎯 STICKY SESSIONS (Optional - for stateful apps)
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/session-cookie-name: "neko-session"
    nginx.ingress.kubernetes.io/session-cookie-expires: "3600"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "3600"

spec:
  ingressClassName: nginx

  # 🔐 TLS/SSL Configuration
  tls:
    - hosts:
        - api.your-domain.com
        - www.api.your-domain.com
      secretName: neko-defense-api-tls

  # 🌐 ROUTING RULES
  rules:
    # Main API domain
    - host: api.your-domain.com
      http:
        paths:
          # GraphQL endpoint
          - path: /graphql
            pathType: Prefix
            backend:
              service:
                name: neko-defense-api-service
                port:
                  number: 80

          # Health check
          - path: /health
            pathType: Exact
            backend:
              service:
                name: neko-defense-api-service
                port:
                  number: 80

          # All other paths
          - path: /
            pathType: Prefix
            backend:
              service:
                name: neko-defense-api-service
                port:
                  number: 80

    # Alternative domain (www)
    - host: www.api.your-domain.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: neko-defense-api-service
                port:
                  number: 80

---

# 🔐 CERT-MANAGER CERTIFICATE
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: neko-defense-api-cert
  namespace: production
spec:
  secretName: neko-defense-api-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
    - api.your-domain.com
    - www.api.your-domain.com
  privateKey:
    algorithm: RSA
    size: 2048
